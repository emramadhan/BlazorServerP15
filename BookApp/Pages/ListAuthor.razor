@page "/listAuthor"
@attribute [Authorize(Roles = "Admin, User")]
@inject IAuthorService authorService

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
   .sort-th {
       cursor: pointer;
   }

   .fa {
       float: right;
   }

   .btn-custom {
       color: black;
       float: left;
       padding: 8px 16px;
       text-decoration: none;
       transition: background-color .3s;
       border: 2px solid #000;
       margin: 0px 5px 0px 5px;
   }
</style>

<AuthorizeView Roles="Admin, User">
   <a class="btn btn-primary" href='/addAuthor/0'>Add new author</a>
</AuthorizeView>

@if (authors == null)
{
   <p><em>Loading...</em></p>
}
else
{
   <div class="row col-md-3 pull-right">
      <input type="text" id="txtSearch"
          placeholder="Search Names..." class="form-control"
          @bind="SearchTerm" @bind:event="oninput" />
   </div>
   <table class="table table-bordered table-hover">
      <thead>
         <tr>
            <th class="sort-th" @onclick="@(() => SortTable("Id"))">
               Id<span class="fa @(SetSortIcon("Id"))"></span>
            </th>
            <th class="sort-th"
             @onclick="@(() => SortTable("FName"))">
               First Name
               <span class="fa @(SetSortIcon("FName"))"></span>
            </th>
            <th class="sort-th"
             @onclick="@(() => SortTable("LName"))">
               Last Name
               <span class="fa @(SetSortIcon("LName"))"></span>
            </th>
            <th class="sort-th"
             @onclick="@(() => SortTable("Phone"))">
               Phone
               <span class="fa @(SetSortIcon("Phone"))"></span>
            </th>
            <AuthorizeView Roles="Admin, User">
               <th>Action</th>
            </AuthorizeView>
         </tr>
      </thead>
      <tbody>
         @if (authors == null || authors.Count == 0)
         {
            <tr>
               <td colspan="3">
                  No Records to display
               </td>
            </tr>
         }
         else
         {
            foreach (var author in authors)
            {
               <tr>
                  <td>
                     <hr style="padding:0px; margin:0px;">
                     @author.Id
                  </td>
                  <td>
                     <hr style="padding:0px; margin:0px;">
                     @author.FName
                  </td>
                  <td>
                     <hr style="padding:0px; margin:0px;">
                     @author.LName
                  </td>
                  <td>
                     <hr style="padding:0px; margin:0px;">
                     @author.Phone
                  </td>
                  <td>
                     <AuthorizeView Roles="Admin, User">
                        <hr style="padding:0px; margin:0px;">
                        <a class="btn btn-primary"
                  href='/editAuthor/@author.Id'>
                           &#8194;Edit&#8194;
                        </a>&#8194;
                     </AuthorizeView>
                     <AuthorizeView Roles="Admin">
                        <a class="btn btn-warning" @onclick="() =>
                           OpenDialog(author.Id,author.LName)">
                           Delete
                        </a>
                     </AuthorizeView>
                  </td>
               </tr>
            }
         }
      </tbody>
   </table>
   <div class="pagination">
      <button class="btn btn-custom" @onclick=@(async ()=>
           await NavigateToPage("previous"))>
         ◀
      </button>
      @for (int i = startPage; i <= endPage; i++)
      {
         var currentPage = i;
         <button class="btn btn-custom pagebutton
                 @(currentPage==curPage?"btn-info":"")"
           @onclick=@(async () =>
           await refreshRecords(currentPage))>
            @currentPage
         </button>
      }
      <button class="btn btn-custom" @onclick=@(async ()=>
           await NavigateToPage("next"))>
         ▶
      </button>
   </div>
}

@if (DialogIsOpen)
{
   <Dialog Caption="Delete an author"
        Message="@message"
        OnClose="@OnDialogClose"
        Type="Dialog.Category.DeleteNot">
   </Dialog>
}

@code {
   private string searchTerm;
   private string SearchTerm
   {
      get { return searchTerm; }
      set { searchTerm = value; FilterRecords(); }
   }

   List<Author> authors;
   private int idAuthor;
   private string message;
   private bool DialogIsOpen = false;

   #region Pagination

   int totalPages;
   int totalRecords;
   int curPage;
   int pagerSize;
   int pageSize;
   int startPage;
   int endPage;
   string sortColumnName = "Id";
   string sortDir = "ASC";

   #endregion

   protected override async Task OnInitializedAsync()
   {
      //display total page buttons
      pagerSize = 3;
      pageSize = 5;
      curPage = 1;
      authors = await authorService.ListAll((curPage - 1) *
         pageSize, pageSize, sortColumnName, sortDir, searchTerm);
      totalRecords = await authorService.Count(searchTerm);
      totalPages = (int)Math.Ceiling
                   (totalRecords / (decimal)pageSize);
      SetPagerSize("forward");
   }

   private void OpenDialog(int id, string title)
   {
      DialogIsOpen = true;
      idAuthor = id;
      message = "Do you want to delete the author \""
                + title + "\"?";
   }

   private async Task OnDialogClose(bool isOk)
   {
      if (isOk)
      {
         await authorService.Delete(idAuthor);
         authors = await authorService.ListAll((curPage - 1) *
         pageSize, pageSize, sortColumnName, sortDir, searchTerm);
      }

      DialogIsOpen = false;
   }

   private bool isSortedAscending;
   private string activeSortColumn;

   private async Task<List<Author>>
           SortRecords(string columnName, string dir)
   {
      return await authorService.ListAll((curPage - 1) * pageSize,
         pageSize, columnName, dir, searchTerm);
   }

   private async Task SortTable(string columnName)
   {
      if (columnName != activeSortColumn)
      {
         authors = await SortRecords(columnName, "ASC");
         isSortedAscending = true;
         activeSortColumn = columnName;
      }
      else
      {
         if (isSortedAscending)
         {
            authors = await SortRecords(columnName, "DESC");
         }
         else
         {
            authors = await SortRecords(columnName, "ASC");
         }

         isSortedAscending = !isSortedAscending;
      }
      sortColumnName = columnName;
      sortDir = isSortedAscending ? "ASC" : "DESC";
   }

   private string SetSortIcon(string columnName)
   {
      if (activeSortColumn != columnName)
      {
         return string.Empty;
      }
      if (isSortedAscending)
      {
         return "fa-sort-up";
      }
      else
      {
         return "fa-sort-down";
      }
   }

   public async Task refreshRecords(int currentPage)
   {
      authors = await authorService.ListAll((currentPage - 1) *
         pageSize, pageSize, sortColumnName, sortDir, searchTerm);
      curPage = currentPage;
      this.StateHasChanged();
   }

   public void SetPagerSize(string direction)
   {
      if (direction == "forward" && endPage < totalPages)
      {
         startPage = endPage + 1;
         if (endPage + pagerSize < totalPages)
         {
            endPage = startPage + pagerSize - 1;
         }
         else
         {
            endPage = totalPages;
         }
         this.StateHasChanged();
      }
      else if (direction == "back" && startPage > 1)
      {
         endPage = startPage - 1;
         startPage = startPage - pagerSize;
      }
      else
      {
         startPage = 1;
         endPage = totalPages;
      }
   }

   public async Task NavigateToPage(string direction)
   {
      if (direction == "next")
      {
         if (curPage < totalPages)
         {
            if (curPage == endPage)
            {
               SetPagerSize("forward");
            }
            curPage += 1;
         }
      }
      else if (direction == "previous")
      {
         if (curPage > 1)
         {
            if (curPage == startPage)
            {
               SetPagerSize("back");
            }
            curPage -= 1;
         }
      }
      await refreshRecords(curPage);
   }

   public void FilterRecords()
   {
      endPage = 0;
      this.OnInitializedAsync().Wait();
   }
}
